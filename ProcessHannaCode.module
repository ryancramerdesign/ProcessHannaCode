<?php

/**
 * Process Hanna Code
 *
 * ProcessWire 2.x
 * Copyright (C) 2013 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class ProcessHannaCode extends Process implements ConfigurableModule {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Hanna Code',
			'summary' => 'Easily insert any complex HTML, Javascript or PHP output in your ProcessWire content by creating your own Hanna code tags.',
			'version' => 15,
			'permission' => 'hanna-code',
			'requires' => 'TextformatterHannaCode'
			);
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 */
	const pageName = 'hanna-code';

	/**
	 * Default theme for the Ace Editor
	 *
	 */
	const defaultAceTheme = 'github';

	/**
	 * Default height (in pixels) for the Ace Editor
	 *
	 */
	const defaultAceHeight = '400';

	/**
	 * Instance of TextformatterHannaCode
	 *
	 */
	protected $hanna = null;

	public function __construct() {
		$this->set('aceTheme', self::defaultAceTheme);
		$this->set('aceHeight', self::defaultAceHeight);
	}

	/**
	 * This is an optional initialization function called before any execute functions.
	 *
	 */
	public function init() {
		if(!$this->user->isSuperuser()) throw new WirePermissionException("This module may only be used by superuser");
		parent::init(); // required
		$data = $this->modules->getModuleConfigData('TextformatterHannaCode');
		$this->set('openTag', isset($data['openTag']) ? $data['openTag'] : TextformatterHannaCode::DEFAULT_OPEN_TAG);
		$this->set('closeTag', isset($data['closeTag']) ? $data['closeTag'] : TextformatterHannaCode::DEFAULT_CLOSE_TAG);
		$this->set('typeLabels', array(
			0 => $this->_('Text/HTML'),
			1 => $this->_('Javascript'),
			2 => $this->_('PHP')
			));
		$this->hanna = $this->modules->get('TextformatterHannaCode');
	}

	/**
	 * This function is executed when a page with your Process assigned is accessed.
 	 *
	 */
	public function ___execute() {

		$table = $this->modules->get('MarkupAdminDataTable');
		$table->setEncodeEntities(false);
		$table->headerRow(array(
			$this->_x('Name', 'list-table'),
			$this->_x('Tag', 'list-table'),
			$this->_x('Type', 'list-table'),
			$this->_x('Modified', 'list-table'),
			$this->_x('Accessed', 'list-table')
			));

		$typeLabels = $this->typeLabels;

		$sort = 'name';
		if($this->input->get->sort == '-modified') $sort = 'modified DESC';
		$result = $this->db->query("SELECT id, name, type, modified, accessed, code FROM hanna_code ORDER BY $sort");

		while($row = $result->fetch_row()) {
			list($id, $name, $type, $modified, $accessed, $code) = $row;
			$attrs = '';
			foreach($this->hanna->extractDefaultCodeAttrs($code) as $attrName => $attrValue) {
				$attrs .= " $attrName=\"$attrValue\"";
			}

			if(preg_match('/[a-zA-Z0-9]$/', $this->openTag)) $name = " name=\"$name\"";
			$tag = $this->openTag . $name . $attrs . $this->closeTag;

			if($type & TextformatterHannaCode::TYPE_NOT_CONSUMING) $type -= TextformatterHannaCode::TYPE_NOT_CONSUMING;

			$table->row(array(
				wire('sanitizer')->entities($name) => "edit/?id=$id",
				"<code>" . wire('sanitizer')->entities($tag) . "</code>",
				$typeLabels[$type],
				wireRelativeTimeStr($modified),
				wireRelativeTimeStr($accessed)
				));
		}

		if(!$result->num_rows) $this->message($this->_('No Hanna Codes yet, go ahead and add one!'));

		$button1 = $this->modules->get('InputfieldButton');
		$button1->attr('id', 'button_add');
		$button1->attr('value', $this->_('Add New'));
		$button1->attr('href', './edit/');
		$button1->class .= ' head_button_clone';

		$button2 = $this->modules->get('InputfieldButton');
		$button2->attr('id', 'button_import');
		$button2->attr('value', $this->_('Import'));
		$button2->attr('href', './import/');
		$button2->class .= ' ui-priority-secondary';

		$out = $table->render();
		if(empty($out)) $out .= "<br />";

		return $out . $button1->render() . $button2->render();
	}

	public function ___executeImport() {

		$form = $this->modules->get('InputfieldForm');

		$f = $this->modules->get('InputfieldTextarea');
		$f->attr('id+name', 'hc_import');
		$f->label = $this->_("Paste in Import Data");
		$form->add($f);

		$f = $this->modules->get('InputfieldSubmit');
		$f->attr('name', 'submit_import');
		$form->add($f);

		Wire::setFuel('processHeadline', $this->_("Import Hanna Code"));

		if(!$this->input->post->submit_import) return $form->render();

		$form->processInput($this->input->post);
		$data = $form->get('hc_import')->value;
		if(!preg_match('{!HannaCode:([^:]+):(.*?)/!HannaCode}s', $data, $matches)) throw new WireException("Unrecognized Hanna Code format");
		$name = $matches[1];
		$data = $matches[2];
		$data = base64_decode($data);
		if($data === false) throw new WireException("Failed to base64 decode import data");
		$data = json_decode($data, true);
		if($data === false) throw new WireException("Failed to json decode import data");
		if(empty($data['name']) || empty($data['code'])) throw new WireException("Import data does not contain all required fields");

		$result = $this->db->query("SELECT COUNT(*) FROM hanna_code WHERE name='" . $this->db->escape_string($name) . "'");
		list($n) = $result->fetch_row();
		if($n > 0) {
			$this->error($this->_('Hanna Code with that name already exists'));
			return $this->session->redirect('../');
		}

		$sql = 	"INSERT INTO hanna_code SET " .
			"`name`='" . $this->db->escape_string($name) . "', " .
			"`type`=" . ((int) $data['type']) . ", " .
			"`code`='" . $this->db->escape_string($data['code']) . "', " .
			"`modified`=" . time();

		if($this->db->query($sql)) {
			$this->message($this->_('Imported Hanna Code:') . " " . wire('sanitizer')->entities($name));
			$id = $this->db->insert_id;
			$this->session->redirect("../edit/?id=$id");
		} else {
			throw new WireException("Error importing (database insert)");
		}
	}

	public function ___executeTest() {
		$name = $this->sanitizer->pageName($this->input->get->name);
		if(empty($name)) throw new WireException('Nothing provided to test');
		$hanna = $this->modules->get('TextformatterHannaCode');
		$test = $hanna->openTag . $name . $hanna->closeTag;
		$this->config->debug = true;
		$timer = Debug::timer();

		$intro = $this->_('This test is here primarily to check for parse errors. Blank output indicates that there were no parse errors. You should still test in a real-world context before assuming it works. Output is in the dashed box below:');

		echo <<< _OUT

		<!DOCTYPE html>
		<html>
		<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<style type='text/css'>
			body {
				background: #fff;
				color: #555;
				font-family: Arial;
			}
		</style>
		<body>
			<p style='margin-top: 0;'><small>$intro</small></p>
			<p><pre>$test</pre></p>
			<div style='border: 1px dashed #ccc; padding: 10px;'>

_OUT;
		echo $hanna->render($test);

		$seconds = sprintf($this->_('Executed in %s seconds'), Debug::timer($timer));

		echo <<< _OUT

			</div>
			<p><small>$seconds</small></p>
		</body>
		</html>
_OUT;

		exit;
	}

	/**
	 * Called when the URL is this module's page URL + "/something/"
	 *
	 */
	public function ___executeEdit() {

		// add a breadcrumb that returns to our main page
		$this->breadcrumbs->add(new Breadcrumb('../', $this->page->title));
		$this->modules->get('JqueryWireTabs');

		$id = (int) $this->input->get->id;
		if($id) {
			$result = $this->db->query("SELECT name, type, code FROM hanna_code WHERE id=$id");
			if(!$result->num_rows) throw new WireException("Unknown ID");
			list($name, $type, $code) = $result->fetch_row();
			$exportData = array('name' => $name, 'type' => $type, 'code' => $code);
			$attr = '';
			foreach($this->hanna->extractDefaultCodeAttrs($code) as $attrName => $attrValue) {
				$attr .= strlen($attrValue) ? "$attrName=$attrValue\n" : "$attrName\n";
			}

			Wire::setFuel('processHeadline', $this->_("Edit Hanna Code:") . " $name");
		} else {
			$name = '';
			$type = 0;
			$code = '';
			$attr = '';
			$exportData = null;
			Wire::setFuel('processHeadline', $this->_("Adding New Hanna Code"));
		}

		$form = $this->modules->get('InputfieldForm');
		$form->attr('id', 'HannaCodeEdit');
		$form->action = './';
		$form->method = 'post';

		$tab = new InputfieldWrapper();
		$tab->attr('title', $this->_('Basics'));
		$tab->class .= " WireTab";

		$nameField = $this->modules->get('InputfieldName');
		$nameField->attr('name', 'hc_name');
		$nameField->attr('value', $name);
		$nameField->description = $this->_('Any combination of these characters: -_.a-zA-Z0-9 (i.e. letters, numbers, hyphens, underscores, periods, no spaces)');
		$tab->add($nameField);

		$typeField = $this->modules->get('InputfieldRadios');
		$typeField->attr('name', 'hc_type');
		foreach($this->typeLabels as $key => $label) $typeField->addOption($key, $label);
		$typeField->attr('value', $type & TextformatterHannaCode::TYPE_NOT_CONSUMING ? $type - TextformatterHannaCode::TYPE_NOT_CONSUMING : $type);
		$typeField->label = $this->_('Type');
		$typeField->optionColumns = 1;
		$tab->add($typeField);

		$yes = $this->_('Yes');
		$no = $this->_('No');
		$value = $type & TextformatterHannaCode::TYPE_NOT_CONSUMING ? 1 : 0;
		$f = $this->modules->get('InputfieldRadios');
		$f->attr('name', 'hc_not_consuming');
		$f->addOption(0, $yes);
		$f->addOption(1, $no);
		$f->attr('value', $value);
		$f->label = $this->_('Replace surrounding HTML tag?') . ' [' . ($value ? $no : $yes) . ']';
		$f->description = $this->_('Should the output of this Hanna Code replace the immediate surrounding HTML tag if it is the only thing in the tag? If your Hanna Code outputs block-level HTML (like <ul> or <p> tags), this should probably be yes.');
		$f->collapsed = Inputfield::collapsedYes;
		$tab->add($f);

		$f = $this->modules->get('InputfieldTextarea');
		$f->attr('id+name', 'hc_attr');
		$f->attr('value', trim($attr));
		$f->label = $this->_('Attributes');
		$f->description = $this->_('Optional but recommended if using attributes with PHP or Javascript: Enter one attribute name per line that your Hanna code uses. To specify a default value, enter it as "attr=value". If no default specified, value defaults to a blank string.');
		$f->notes = $this->_('Examples:') . "\nsome_attribute\nattribute_with_default=The Default Value";
		$f->collapsed = Inputfield::collapsedBlank;
		$tab->add($f);

		$form->add($tab);


		$tab = new InputfieldWrapper();
		$tab->attr('title', $this->_('Code'));
		$tab->class .= ' WireTab';

		$f = $this->modules->get('InputfieldTextarea');
		$f->attr('id+name', 'hc_code');
		$f->attr('value', $code);
		$f->label = $this->_('Code');
		$f->attr('rows', 20);
		$f->attr('data-theme', $this->aceTheme);
		$f->attr('data-height', $this->aceHeight);
		$tab->add($f);

		$f = $this->modules->get('InputfieldMarkup');
		$f->label = $this->_('PHP and Javascript Usage Notes');
		$f->value = file_get_contents(dirname(__FILE__) . '/usage-notes.php');
		$f->collapsed = Inputfield::collapsedYes;
		$tab->add($f);

		$form->add($tab);

		if($exportData) {
			$tab = new InputfieldWrapper();
			$tab->attr('title', $this->_('Export'));
			$tab->class .= " WireTab";
			$f = $this->modules->get('InputfieldTextarea');
			$f->attr('id+name', 'hc_export');
			$f->attr('value', "!HannaCode:$name:" . base64_encode(json_encode($exportData)) . "/!HannaCode");
			$f->label = $tab->attr('title');
			$f->description = $this->_('To export this Hanna code and import somewhere else, copy the contents of this field and paste into the import box somewhere else.');
			$f->notes = $this->_('If you have made any changes above, make sure to save before copying the export data here.');
			$tab->add($f);
			$form->add($tab);
		}

		if($id) {
			$tab = new InputfieldWrapper();
			$tab->attr('title', $this->_('Delete'));
			$tab->class .= " WireTab";
			$tab->attr('id', 'HannaCodeDelete');
			$f = $this->modules->get('InputfieldCheckbox');
			$f->attr('name', 'hc_delete');
			$f->attr('value', $id);
			$f->label = $tab->attr('title');
			$f->description = $this->_('Check the box and submit the form to permanently delete this Hanna Code.');
			$tab->add($f);
			$form->add($tab);
		}

		if($this->input->get->test) {
			$tab = new InputfieldWrapper();
			$tab->attr('title', $this->_('Test Results'));
			$tab->class .= " WireTab";
			$tab->attr('id', 'HannaCodeTestResults');
			$f = $this->modules->get('InputfieldMarkup');
			$f->label = $this->_('Test Results');
			$f->value = "
				<iframe frameborder='0' id='HannaCodeTestPort' src='../test/?name=$name&modal=1'></iframe>
				<script>$(document).ready(function() { $('#_HannaCodeTestResults').click(); });</script>
				";
			$tab->add($f);
			$form->add($tab);

		}

		$f = $this->modules->get('InputfieldHidden');
		$f->attr('name', 'hc_id');
		$f->attr('value', $id);
		$form->add($f);

		$f = $this->modules->get('InputfieldSubmit');
		$f->class .= ' head_button_clone';
		$f->attr('id+name', 'hc_save');
		$f->attr('value', $this->_('Save'));
		$form->add($f);

		if($id) {
			$f = $this->modules->get('InputfieldSubmit');
			$f->attr('id+name', 'hc_save_test');
			$f->attr('value', $this->_('Save & Test'));
			$form->add($f);
		}

		$f = $this->modules->get('InputfieldSubmit');
		$f->attr('id+name', 'hc_save_exit');
		$f->class .= " ui-priority-secondary";
		$f->attr('value', $this->_('Save & Exit'));
		$form->add($f);

		$post = $this->input->post;
		if($post->hc_save || $post->hc_save_exit || $post->hc_save_test) $this->save($form);

		$this->config->scripts->add($this->config->urls->ProcessHannaCode . "ace/src-min/ace.js");

		return $form->render();
	}

	/**
	 * Save Hanna code
	 *
	 */
	protected function save($form) {

		$id = (int) $this->input->post->hc_id;
		$delete = (int) $this->input->post->hc_delete;
		$exitAfterSave = $this->input->post->hc_save_exit;
		$testAfterSave = $this->input->post->hc_save_test;

		if($delete && $delete === $id) {
			$this->db->query("DELETE FROM hanna_code WHERE id=$delete LIMIT 1");
			$this->message($this->_('Deleted Hanna Code'));
			$this->session->redirect('../');
		}

		$form->processInput($this->input->post);
		$name = $form->get('hc_name')->value;
		$type = (int) $form->get('hc_type')->value;
		$code = $form->get('hc_code')->value;
		$notc = $form->get('hc_not_consuming')->value;
		$attr = $form->get('hc_attr')->value;

		if($attr) {
			// bundle default attr values as PHP code
			$out = '';
			foreach(explode("\n", $attr) as $line) {
				$line = trim($line);
				if(strpos($line, '=')) {
					list($attrName, $attrValue) = explode('=', $line);
					$attrName = $this->sanitizer->fieldName(trim($attrName));
					$attrValue = '"' . str_replace('"', '\"', $attrValue) . '"';
					$attrValue = str_replace(array('/*', '*/', 'hc_attr'), '', $attrValue);
				} else {
					$attrName = $line;
					$attrValue = '""';
				}
				if(empty($attrName)) continue;
				if(wire($attrName) || in_array($attrName, array('name', 'hanna', 'attr'))) {
					$this->error($this->_('Disallowed attribute name:') . " $attrName");
					$attrName = '_' . $attrName;
				}
				$out .= "$attrName=$attrValue\n";
			}
			if($out) $code = "/*hc_attr\n{$out}hc_attr*/\n" . $code;
			unset($out, $attr);
		}

		if($notc) {
			$type = $type | TextformatterHannaCode::TYPE_NOT_CONSUMING;
		}

		if(empty($name)) {
			$form->get('hc_name')->error('Name is required');
			return false;
		}

		if(empty($code)) $code = '';

		$sql = 	($id ? "UPDATE " : "INSERT INTO ") . "hanna_code " .
			"SET " .
			"`name`='" . $this->db->escape_string($name) . "', " .
			"`type`=$type, " .
			"`code`='" . $this->db->escape_string(trim($code)) . "', " .
			"`modified`=" . time() . " " .
			($id ? "WHERE id=$id" : "");

		$result = $this->db->query($sql);

		if($result) {
			if(!$id) $id = $this->db->insert_id;
			$this->message($this->_("Saved Hanna Code"));
			if($exitAfterSave) $this->session->redirect("../?sort=-modified");
				else if($testAfterSave) $this->session->redirect("./?id=$id&test=1");
				else $this->session->redirect("./?id=$id");
		} else {
			$this->error("Error saving");
			return false;
		}
	}

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned.
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}");
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed.
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}");
			$page->delete();
		}
	}

	public static function getModuleConfigInputfields(array $data) {

		$themes = array();
		$dir = new DirectoryIterator(dirname(__FILE__) . '/ace/src-min/');
		foreach($dir as $file) {
			$name = $file->getBasename();
			if(preg_match('/^theme-([^.]+)\.js$/', $name, $matches)) {
				$themes[] = $matches[1];
			}
		}

		$form = new InputfieldWrapper();
		$f = wire('modules')->get('InputfieldSelect');
		$f->label = __('Code Editor Theme');
		$f->attr('name', 'aceTheme');
		foreach($themes as $theme) $f->addOption($theme);
		$f->attr('value', !empty($data['aceTheme']) ? $data['aceTheme'] : self::defaultAceTheme);
		$f->notes = __('See the [Ace Editor demo](http://ace.c9.io/build/kitchen-sink.html) to preview what the different themes look like.');
		$form->add($f);

		$f = wire('modules')->get('InputfieldInteger');
		$f->label = __('Code Editor Height (in pixels)');
		$f->attr('name', 'aceHeight');
		$f->attr('value', isset($data['aceHeight']) ? $data['aceHeight'] : self::defaultAceHeight);
		$form->add($f);

		return $form;
	}


}
